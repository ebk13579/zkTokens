import "EMBED/unpack" as unpack
import "utils/pack/pack128" as pack128

import "ecc/babyjubjubParams" as context
import "ecc/proofOfOwnership.zok"
import "hashes/sha256/512bitPacked.code" as sha256packed

def main(private field sk, private field oPk1, private field oPk2, private field amount, public field h1, public field h2, private field rPk1, private field rPk2, private field secretA, private field secretB) -> (field[2]):
    
    //check previous hash [owner public key]
    field[254] ua = unpack(oPk1) 
    field[256] uaa = [0, 0, ...ua]
    field[254] ub = unpack(oPk2)
    field[256] ubb = [0, 0, ...ub]
    field oPk1a = pack128(uaa[0..128])
    field oPk1b = pack128(uaa[128..256])
    field oPk2a = pack128(ubb[0..128])

    hash = sha256packed([oPk1a, oPk1b, oPk2a, amount])
    hash[0] == h1
    hash[1] == h2 

    //check privatekey
    context = context()
    field[2] G = [context[4], context[5]]
    field[2] oPk = [oPk1, oPk2]
    field out = proofOfOwnership(oPk, sk, context)
    out == 1

    //create new hash [receiver public key] receiver and owner
    0 == if amount == 0 then 1 else 0 fi

    field[254] ra = unpack(rPk1) 
    field[256] raa = [0, 0, ...ra]
    field[254] rb = unpack(rPk2)
    field[256] rbb = [0, 0, ...rb]
    field rPk1a = pack128(raa[0..128])
    field rPk1b = pack128(raa[128..256])
    field rPk2a = pack128(rbb[0..128])
    field[2] rhashnew = sha256packed([rPk1a, rPk1b, rPk2a, amount])

    //calculate commitment with the secretA and secretB - secretA is made public for withdraw
    field[2] commit = sha256packed([rhashnew[0], rhashnew[1], secretA, secretB])

    return commit
